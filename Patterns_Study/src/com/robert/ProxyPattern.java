package com.robert;

/**
 * 为其他对象提供一种代理以控制对这个对象的访问。
 * 说白了就是，在一些情况下客户不想或 者不能直接引用一个对象，而代理对象可以在客户和目标对象之间起到中介作用，去掉客户
 * 不能看到的内容和服务或者增添客户需要的额外服务。
 * 
 * 1) 远程（Remote）代理：为一个位于不同的地址空间的对象提供一个局域代表对象。比 如：你可以将一个在世界某个角落一台机器通过代理假象成你局域网中的一部分。
 * 2) 虚拟（Virtual）代理：根据需要将一个资源消耗很大或者比较复杂的对象延迟的真正需 要时才创建。比如：如果一个很大的图片，需要花费很长时间才能显示出来，那么当这 个图片包含在文档中时，使用编辑器或浏览器打开这个文档，这个大图片可能就影响了 文档的阅读，这时需要做个图片 Proxy 来代替真正的图片。
 * 3) 保护（Protect or Access）代理：控制对一个对象的访问权限。比如：在论坛中，不同 的身份登陆，拥有的权限是不同的，使用代理模式可以控制权限（当然，使用别的方式 也可以实现） 。 
 * 4) 智能引用（Smart Reference）代理：提供比对目标对象额外的服务。比如：纪录访问 的流量（这是个再简单不过的例子） ，提供一些友情提示等等。
 * 
 * 代理模式就有三个角色组成了：
 * 1) 抽象主题角色：声明了真实主题和代理主题的共同接口。
 * 2) 代理主题角色：内部包含对真实主题的引用，并且提供和真实主题角色相同的接口。
 * 3) 真实主题角色：定义真实的对象。
 * 
 * @author robert
 *
 */
public class ProxyPattern {

	/**
	 * @param args
	 */
	public static void main(String[] args) {

	}

}
