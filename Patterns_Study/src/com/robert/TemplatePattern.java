package com.robert;

/**
 * 模板方法(Template Method)模式:定义一个操作中的算法的骨架,而将一些步骤延迟到子类中。
 * 使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。
 * 这里的算法的结构,可以理解为你根据需求设计出来的业务流程。
 * 特定的步骤就是指那些可能在内容上存在变数的环节。
 * 
 * 简单模式的结构吧:
 * 1) 抽象类(Abstract Class)
 * :定义了一到多个的抽象方法,以供具体的子类来实现它们;
 * 而且还要实现一个模板方法,来定义一个算法的骨架。
 * 该模板方法不仅调用前面的抽象方法,也可以调用其他的操作,只要能完成自身的使命。
 * 2) 具体类(Concrete Class) 实现父类中的抽象方法以完成算法中与特定子类相关的步骤。
 * 
 * 模板方法适用于以下情况:
 * 1) 一次性实现一个算法的不变的部分,并将可变的行为留给子类来实现。
 * 2) 各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。
 * 其实这可以说是一种好的编码习惯了。
 * 3) 控制子类扩展。模板方法只在特定点调用操作,这样就只允许在这些点进行扩展。
 * 比如上面 runBare()方法就只在 runTest 前面适用 setUp 方法。
 * 如果你不愿子类来修改你的模板方法定义的框架,你可以采用两种方式来做:
 * 一是在 API 中不体现出你的模板方法;或者将你的模板方法置为 final 就可以了。
 * 
 * @author robert
 *
 */
public class TemplatePattern {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
