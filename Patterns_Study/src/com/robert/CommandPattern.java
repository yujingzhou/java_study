package com.robert;

/**
 * 将一个请求封装为一个对象，从而使你可用不同的 请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤消的操作。
 * 
 * 命令模式是有哪些角色来组成：
 * 1) 命令角色（Command）：声明执行操作的接口。有 java 接口或者抽象类来实现。
 * 2) 具体命令角色（Concrete Command）：将一个接收者对象绑定于一个动作；调用接收者相应的操作，以实现命令角色声明的执行操作的接口。
 * 3) 客户角色（Client）：创建一个具体命令对象（并可以设定它的接收者）。
 * 4) 请求者角色（Invoker）：调用命令对象执行这个请求。
 * 5) 接收者角色（Receiver）：知道如何实施与执行一个请求相关的操作。任何类都可能作为一个接收者。
 * 
 * 命令模式有以下优点：
 * 1) 命令模式将调用操作的请求对象与知道如何实现该操作的接收对象解耦。
 * 2) 具体命令角色可以被不同的请求者角色重用。
 * 3) 你可将多个命令装配成一个复合命令。
 * 4) 增加新的具体命令角色很容易，因为这无需改变已有的类。
 * 
 * GOF 总结了命令模式的以下适用环境。
 * 1) 需要抽象出待执行的动作，然后以参数的形式提供出来——类似于过程设计中的回调机制。而命令模式正是回调机制的一个面向对象的替代品。
 * 2) 在不同的时刻指定、排列和执行请求。一个命令对象可以有与初始请求无关的生存期。
 * 3) 需要支持取消操作。
 * 4) 支持修改日志功能。这样当系统崩溃时，这些修改可以被重做一遍。
 * 5) 需要支持事务操作。
 * 
 * @author robert
 *
 */
public class CommandPattern {

	/**
	 * @param args
	 */
	public static void main(String[] args) {

	}

}
