package com.robert;

/**
 * 定义：
 * 主要是定义一系列的算法,把这些算法一个个封装成拥有共同接口的单独的类，并且使它们之间可以互换。
 * 策略模式使这些算法在客户端调用它们的时候能够互不影响地变化。
 * 这里的算法不要狭义的理解为数据结构中算法,可以理解为不同的业务处理方法。
 * 
 * 策略模式由三个角色组成:
 * 1) 算法使用环境(Context)角色:算法被引用到这里和一些其它的与环境有关的操作一起来完成任务。
 * 2) 抽象策略(Strategy)角色:规定了所有具体策略角色所需的接口。在java它通常由接口或者抽象类来实现。
 * 3) 具体策略(Concrete Strategy)角色:实现了抽象策略角色定义的接口。
 * 
 * 策略模式的一些建议:
 * 1) 系统需要能够在几种算法中快速的切换。
 * 2) 系统中有一些类它们仅行为不同时,可以考虑采用策略模式来进行重构
 * 3) 系统中存在多重条件选择语句时,可以考虑采用策略模式来重构。
 * 但是要注意一点,策略模式中不可以同时使用多于一个的算法。
 * 
 * @author robert
 *
 */
public class StrategyPattern {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
