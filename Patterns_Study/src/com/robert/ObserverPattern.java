package com.robert;

/**
 * 观察者(Observer)模式又名发布-订阅(Publish/Subscribe)模式。
 * 观察者模式如下定义:定义对象间的一种一对多的依赖关系,当一个对象的状态发生改变时,所有依
 * 赖于它的对象都得到通知并被自动更新。
 * 
 * 观察者模式的组成部分：
 * 1) 抽象目标角色(Subject):目标角色知道它的观察者,可以有任意多个观察者观察同一个目标。
 * 并且提供注册和删除观察者对象的接口。
 * 目标角色往往由抽象类或者接口来实现。
 * 
 * 2) 抽象观察者角色(Observer):为那些在目标发生改变时需要获得通知的对象定义一个更新接口。
 * 抽象观察者角色主要由抽象类或者接口来实现。
 * 
 * 3) 具体目标角色(Concrete Subject):将有关状态存入各个 Concrete Observer 对象。
 * 当它的状态发生改变时, 向它的各个观察者发出通知。
 * 
 * 4) 具体观察者角色(Concrete Observer):存储有关状态,这些状态应与目标的状态保持一致。
 * 实现 Observer 的更新接口以使自身状态与目标的状态保持一致。在本角色内也
 * 可以维护一个指向 Concrete Subject 对象的引用。
 * 
 * 1) 当一个抽象模型有两个方面, 其中一个方面依赖于另一方面。
 * 将这二者封装在独立的对象中以使它们可以各自独立地改变和复用。
 * 2) 当对一个对象的改变需要同时改变其它对象, 而不知道具体有多少对象有待改变。
 * 3) 当一个对象必须通知其它对象,而它又不能假定其它对象是谁。换言之, 你不希望这些对象是紧密耦合的。
 * 
 * @author robert
 *
 */
public class ObserverPattern {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
